{
	"info": {
		"_postman_id": "b2252ed4-5090-4d3f-b867-ac6ea74385c7",
		"name": "Toolshop API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45949591"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Script để tự động lấy và lưu token sau khi đăng nhập thành công\r",
									"pm.test(\"Successful Login and token received\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.access_token).to.be.a('string');\r",
									"\r",
									"    // Lưu token vào một biến của Collection tên là AUTH_TOKEN\r",
									"    if (responseJson.access_token) {\r",
									"        pm.collectionVariables.set(\"AUTH_TOKEN\", responseJson.access_token);\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"customer@practicesoftwaretesting.com\",\r\n  \"password\": \"welcome01\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API_01: /product/search",
			"item": [
				{
					"name": "1. Search - Valid Keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body has 'data' property and it is an array\", () => {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"});\r",
									"pm.test(\"Response data should not be empty\", () => {\r",
									"    pm.expect(pm.response.json().data).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/search?q=Hammer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Hammer"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Search - No Results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response data array should be empty\", () => {\r",
									"    pm.expect(pm.response.json().data).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/search?q=nonexistent123xyz",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "nonexistent123xyz"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Search - Ignored Filter Param (Bug Confirm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Test này mong đợi API trả về TẤT CẢ sản phẩm, chứng tỏ nó đã bỏ qua param 'category'\r",
									"pm.test(\"Response data should not be empty (confirms filter was ignored)\", () => {\r",
									"    pm.expect(pm.response.json().data).to.not.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/search?category=Hammer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "category",
									"value": "Hammer"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API_02: /favorites",
			"item": [
				{
					"name": "1. Add Favorite - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response contains a generated 'id'\", () => {\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/favorites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Add Favorite - No Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", () => {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/favorites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Add Favorite - Non-existent Product (Bug Confirm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test này kiểm tra hành vi thực tế (là 422) do có bug\r",
									"pm.test(\"Status code is 422 Unprocessable Content\", () => {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\": 99999\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/favorites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Add Favorite - Already Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Content\", () => {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Response message indicates a duplicate entry\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"Duplicate Entry\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\": 6\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/favorites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API_03: /favorites/{favoriteId}",
			"item": [
				{
					"name": "1. Get Favorite - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response body has the correct id\", () => {\r",
									"    pm.expect(pm.response.json()).to.have.property('id', 6);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/favorites/6",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Get Favorite - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"product_id\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/favorites/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Delete Favorite - \"Success\" (Bug Confirm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test này chỉ kiểm tra status code 204.\r",
									"// Việc chức năng sai đã được ghi nhận trong file Excel.\r",
									"pm.test(\"Status code is 204 No Content\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// {\"confirm\": true} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/favorites/6",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Delete Favorite - Not Found (Bug Confirm)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test này chỉ kiểm tra status code 204.\r",
									"// Việc chức năng sai đã được ghi nhận trong file Excel.\r",
									"pm.test(\"Status code is 204 No Content\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AUTH_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "// {\"confirm\": true} ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/favorites/9999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bug Regression Tests",
			"item": [
				{
					"name": "BUG - Search with Invalid Path Traversal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// TEST NÀY ĐƯỢC THIẾT KẾ ĐỂ FAILED\r",
									"// Mong đợi API trả về lỗi 400 Bad Request\r",
									"pm.test(\"Status code should be 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400); // Thực tế API trả về 200 OK\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/search?q=../../",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "../../"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "AUTH_TOKEN",
			"value": ""
		}
	]
}